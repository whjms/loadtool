/**
 * Table model used to display part names, loads, and quantities
 * @author Qasim Ali
 * Date: August 26, 2013
 */
import javax.swing.table.AbstractTableModel;
import java.util.*;

public class PartTableModel extends AbstractTableModel {
	// Generated by Eclipse
	private static final long serialVersionUID = 6100087519877725049L;
	
	private PartsList partList;
	private final String[] columnNames = {"Part", "Load (Individual)",
		"Quantity", "Type"};
	private MainGui ui;
	public PartTableModel(PartsList list) {
		this.partList = list;
	}

	public void setGui(MainGui ui) {
		this.ui = ui;
	}
	
	@Override
	public String getColumnName(int col) {
		return this.columnNames[col];
	}
	@Override
	public int getColumnCount() {
		return 4; // type, name, load, quantity
	}

	@Override
	public int getRowCount() {
		return this.partList.getQuantities().keySet().size();
	}

	@Override
	public Object getValueAt(int row, int col) {
		ArrayList<Item> parts = new ArrayList<Item>(
			this.partList.getQuantities().keySet());
		if(col == 0) {
			// return name
			return parts.get(row).getName();
		}
		else if(col == 1) {
			// return load
			return parts.get(row).getLoad();
		}
		else if(col == 2) {
			// return quantity
			return this.partList.getQuantities().get(parts.get(row));
		}
		else {
			// return type
			return parts.get(row).getType();
		}
	}
	
	/**
	 * Used to edit the quantity table and to notify the listener to update
	 */
	@Override
	public void setValueAt(Object value, int row, int col) {
		// only edit the 'quantity' column, and only if the new quantity is > 1
		if(col == 2 && (int)value > 1) {
			// ew
			this.ui.setQuantity((Item)this.partList.getQuantities().keySet().toArray()[row], (int)value);
			this.fireTableCellUpdated(row, col);
		}
	}
	
	/**
	 * Used to enable editing on the 'quantity' column
	 */
	@Override
	public boolean isCellEditable(int row, int column) {
		// quantities is the third column
		return column == 2;
	}
	
	/**
	 * Used to let the table know how to sort and display each column
	 */
	@Override 
	public Class<?> getColumnClass(int row) {
		switch(row){
			case 0:
				return String.class;
			case 1:
				return Double.class;
			case 2:
				return Integer.class;
			case 3:
				return String.class;
			default:
				return String.class;
		}
	}
	
	/**
	 * Get the Item at a specific row. Used by {@link RemoveButtonListener} to
	 * pass the Item to {@link MainGui}'s removeItem().
	 */
	public Item getItem(int row) {
		ArrayList<Item> parts = new ArrayList<Item>(
			this.partList.getQuantities().keySet());
		return parts.get(row);
	}
}
